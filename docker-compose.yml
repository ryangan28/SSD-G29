services:
  web:
    container_name: flask-app
    build:
      context: .
      args:
        REQ_FILE: requirements-prod.txt
    environment:
      - DATABASE_URL
      - DATABASE_USERNAME
      - DATABASE_PASSWORD
      - DATABASE_NAME
      - DATABASE_HOST
      - DATABASE_PORT
      - FLASK_APP
      - FLASK_ENV
    depends_on:
      - db
    entrypoint:
      - ./entrypoint.sh
    volumes:
      - .:/app
    ports:
      - "5000:5000"
    networks:
      - backend-network

  db:
    container_name: postgres-db
    image: postgres:bullseye
    restart: always
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "8888:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend-network

  nginx:
    container_name: nginx-proxy
    image: nginx:stable-perl
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NGINX_CONF_FILE
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/${NGINX_CONF_FILE}:/etc/nginx/conf.d/default.conf:ro
      - certbot-etc:/etc/letsencrypt:ro
      - certbot-var:/var/lib/letsencrypt
    depends_on:
      - web
    networks:
      - backend-network

  certbot:
    container_name: certbot
    image: certbot/certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    entrypoint: /bin/sh -c
    command: >
      "trap exit TERM; while :; do sleep 6h & wait $${!}; certbot renew; done"
    networks:
      - backend-network

volumes:
  postgres_data:
  certbot-etc:
  certbot-var:

networks:
  backend-network:
    driver: bridge
