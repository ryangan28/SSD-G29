services:
  web:
    container_name: flask-app-dev
    build:
      context: .
      args:
        REQ_FILE: requirements.txt  # Use dev requirements
    environment:
      - DATABASE_URL
      - DATABASE_USERNAME
      - DATABASE_PASSWORD
      - DATABASE_NAME
      - DATABASE_HOST
      - DATABASE_PORT
      - FLASK_APP
      - FLASK_ENV=development
      - FLASK_DEBUG=1
    depends_on:
      - db
    volumes:
      - .:/app  # Mount current directory for live code changes
      - /app/__pycache__  # Exclude pycache from volume mount
    ports:
      - "5000:5000"  # Direct access to Flask app
    networks:
      - backend-network
    command: flask run --host=0.0.0.0 --debug  # Development server with debug mode

  db:
    container_name: postgres-db-dev
    image: postgres:13
    restart: always
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "8888:5432"  # External access for database tools
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql  # Auto-initialize schema
    networks:
      - backend-network

  # Optional: Nginx for testing production-like setup
  nginx:
    container_name: nginx-proxy-dev
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - web
    networks:
      - backend-network
    profiles:
      - nginx  # Only start with: docker-compose --profile nginx up

  # Optional: pgAdmin for database management
  pgadmin:
    container_name: pgadmin-dev
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@safecompanions.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - backend-network
    profiles:
      - pgadmin  # Only start with: docker-compose --profile pgadmin up

volumes:
  postgres_data_dev:
  pgadmin_data:

networks:
  backend-network:
    driver: bridge

